#include <stdio.h>

#define MAX_PARTITIONS 4
#define MAX_PROCESSES 5

void worstFit(int partitions[], int numPartitions, int processes[], int numProcesses) {
    int allocation[MAX_PROCESSES] = { -1 };

    for (int i = 0; i < numProcesses; i++) {
        int worstIdx = -1;
        for (int j = 0; j < numPartitions; j++) {
            if (processes[i] <= partitions[j]) {
                if (worstIdx == -1 || partitions[j] > partitions[worstIdx]) {
                    worstIdx = j;
                }
            }
        }

        if (worstIdx != -1) {
            allocation[i] = worstIdx;
            partitions[worstIdx] -= processes[i];
        }
    }

    printf("Process\t\tSize\t\tPartition\n");
    for (int i = 0; i < numProcesses; i++) {
        printf("P%d\t\t%d KB\t\t", i + 1, processes[i]);
        if (allocation[i] != -1) {
            printf("Partition %d\n", allocation[i] + 1);
        } else {
            printf("Not allocated\n");
        }
    }
}

int main() {
    int partitions[MAX_PARTITIONS] = { 40, 10, 30, 60 };
    int processes[MAX_PROCESSES] = { 100, 50, 30, 120, 35 };

    printf("Memory Partitions:\n");
    for (int i = 0; i < MAX_PARTITIONS; i++) {
        printf("Partition %d: %d KB\n", i + 1, partitions[i]);
    }

    printf("\nWorst-Fit Algorithm:\n");
    worstFit(partitions, MAX_PARTITIONS, processes, MAX_PROCESSES);

    return 0;
}
